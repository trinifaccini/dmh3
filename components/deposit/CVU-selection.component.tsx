import * as React from 'react';
import type { NextPage } from 'next'
import Head from 'next/head'
import { Box, useMediaQuery, Button, Stack, Input, Tooltip, IconButton } from '@mui/material';
import Typography from '@mui/material/Typography';
import { theme } from 'integrador/styles/material-theme';
import { useState, useEffect } from 'react';
import { useRouter } from "next/router";
import useChargeMoney from 'integrador/components/contexts/useChargeMoney';
import useStep from '../contexts/useStep';
import InfoOutlinedIcon from '@mui/icons-material/InfoOutlined';


export const ChargeMoneyCVU: NextPage = () => {

    useEffect(()=>{
        const token = localStorage.getItem("token");
        if (!token) {
          router.push("/login");
        }

        if(state.method.account.length == 22){
            setDisabledButton(false);
        }
      }, [])

    const laptopOrDesktop = useMediaQuery(theme.breakpoints.up("laptop"));
    const desktop = useMediaQuery(theme.breakpoints.up("desktop"));
    const mobile = useMediaQuery(theme.breakpoints.down("tablet"));

    const {state, dispatch} = useChargeMoney();
    const {dispatch: stepperDispatch} = useStep();

    const [disabledButton, setDisabledButton] = useState(true);
    const [selectedAccount, setSelectedAccount] = useState<string>('');


    let laptop;
    if (laptopOrDesktop && !desktop)
        laptop = true;


    const router = useRouter();

    const setAccount = (account: string) => {
        setSelectedAccount(account);
        if(account.length < 22 || account.length > 22 ){
            setDisabledButton(true)
        }
        else setDisabledButton(false);
    };    

    const selectAccount = () => {
        dispatch({type: "SET_ACCOUNT", payload: selectedAccount});
        console.log("selected" + state.method.account);
        stepperDispatch({type: "SET_STEP", payload: 1 });
     }

    return (
        <>            
            <Head>
                <title>Cards</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <Stack sx={{
                    width: '100%', 
                    alignItems: 'center', 
                    justifyContent: 'start'
                }} 
                mt={laptopOrDesktop ? '1rem': mobile ? '0' :'3rem'} 
                spacing={laptop ? 1.3 : 2.5 }
            >

                <Box sx={{
                    backgroundColor: 'primary.main', 
                    width: '100%', 
                    borderRadius: '10px',
                    padding:'1.5rem 1.5rem',
                    marginBottom: '2rem'
                }}>
                    <Box width={'100%'} display='flex' alignItems='center'>
                        <Typography variant={'h4'} color='secondary'>Ingres√° el CVU de la cuenta externa</Typography>                        
                        <Tooltip title="Ingresa los 22 numeros del CVU de la cuenta externa">
                            <IconButton>
                                <InfoOutlinedIcon fontSize='small' sx={{color: 'text.secondary'}}/>
                            </IconButton> 
                        </Tooltip> 
                    </Box>

                    <Box sx={{
                        backgroundColor: 'white', 
                        width: laptopOrDesktop ? '50%' : '100%', 
                        borderRadius: '10px',
                        padding:'1rem 1rem',
                        marginTop: '1rem',
                        display: 'flex',
                        alignItems: 'center'
                    }}>
                        <Input
                        type='number'
                        size='medium'
                        sx={{padding: '0', margin: '0', fontSize: mobile ? '12pt': '13pt', height: '100%', width: '100%',
                        [`& .MuiInputBase-input`]: {height: '100%', padding: '0'}}}
                        placeholder={state.method.account.length == 0 ? 'CVU' : ''}
                        defaultValue={state.method.account.length == 0  ? '': state.method.account}
                        disableUnderline={true}
                        onChange={event => setAccount(event.target.value)}
                        />
                    </Box>

                    {!mobile && 
                    <Box sx={{
                        display: 'flex', 
                        justifyContent: 'end', 
                        alignItems: 'center', 
                        m: '0.75rem 0 0.75rem'
                        }} 
                    >
                        <Button color="secondary" variant="contained" disabled={disabledButton} size='large' sx={{width: laptopOrDesktop ? '20%' : '100%', padding: laptopOrDesktop ? 'default' : '1rem 0'}} onClick={() => selectAccount()}>
                            Continuar
                        </Button>
                    </Box>
                    }
                </Box>
                
                {mobile && 
                <Box sx={{display: 'flex', width: '100%', justifyContent: 'end', alignItems: 'center'}}>
                    <Button color="secondary" variant="contained" disabled={disabledButton} size='large' sx={{width: '50%'}} onClick={() => selectAccount()}>
                        Continuar
                    </Button>
                </Box>}
           
            </Stack>
        </>
    )
}

export default ChargeMoneyCVU;
