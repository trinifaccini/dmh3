import * as React from 'react';
import type { NextPage } from 'next'
import Head from 'next/head'
import { useMediaQuery, Button, Stack, Box, Typography } from '@mui/material';
import { theme } from 'integrador/styles/material-theme';
import PageHomeLayout from 'integrador/components/layouts/layout-home.component';
import { useRouter } from "next/router";
import { GET_TRANSACTION_DETAIL } from 'integrador/pages/api/api'
import { CircularProgress } from '@mui/material';
import { GetServerSideProps } from 'next';
import type { Transaction } from 'integrador/components/activitySummary/ActivitySummary';
import DetailCard from 'integrador/components/DetailCard.component';
import CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';
import { display } from '@mui/system';
import ChevronRightIcon from '@mui/icons-material/ChevronRight';


interface DetailPageProps {
    id: string
}
export const DetailPage: NextPage<DetailPageProps> = ({id}) => {
    const [loading, setLoading] = React.useState(true);
    const [transaction, setTransaction] = React.useState<Transaction>();
    const router = useRouter();

    const laptopOrDesktop = useMediaQuery(theme.breakpoints.up("laptop"));
    const desktop = useMediaQuery(theme.breakpoints.up("desktop"));
    const mobile = useMediaQuery(theme.breakpoints.down("tablet"));

    const isDeposit =  window.history.state.prevUrl ? window.history.state.prevUrl.endsWith("/cargarDinero/tarjeta") : false;

    let laptop;
    if (laptopOrDesktop && !desktop)
        laptop = true;

    const getTransactionDetail = async (token: string, accountId: string, idParam: string|string[]) => {
        setLoading(true);
        const requestOptions = {
            method: "GET",
            headers: {
                "Content-Type": "application/json",
                "Authorization": token,
            }
        }
        await fetch(GET_TRANSACTION_DETAIL(accountId, idParam), requestOptions
        ).then(async (res) => {
            const data = await res.json();
            console.log(data)
            if (res.ok) {
                setTransaction(data);
                setLoading(false)
            } else {
                setLoading(false)
            }
        }).catch((error) => {
            setLoading(false)
            console.log(error.message)
        })
    };

    React.useEffect(() => {
        const accountId = localStorage.getItem("account_id") || '';
        const token = localStorage.getItem("token");
        if (token && id && id !== undefined) {
            const idAux = id
            getTransactionDetail(token, accountId, idAux)
        }
    }, [])

    if (loading) {
        return <CircularProgress color="success" sx={{ marginTop: '10rem', color: 'black' }} />;
    }

    return (
        <>
            <Head>
                <title>Detalle actividad</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            {!loading && transaction && 
           <Stack sx={{ width: '100%', alignItems: 'center'}}
                mt={laptopOrDesktop ? '1rem' : mobile ? '0' : '3rem'}
                spacing={laptop ? 1.3 : 2.5}
            >
                {mobile && 
                    <Box sx={{
                    display: 'flex', 
                    alignItems: 'center', 
                    width: '90%', 
                    marginTop: '15px'}}>
                    <ChevronRightIcon fontSize='small'sx={{color: 'grey'}}/>
                    <Typography variant='body1'>Tu actividad</Typography>
                    </Box>
                }
                {isDeposit && 
                    <Box sx={{
                        backgroundColor: 'secondary.main',
                        width: '90%',
                        height: '20%',
                        borderRadius: '10px',
                        padding: '1rem 1rem',
                        marginTop: '1rem',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        flexWrap: 'wrap'
                    }}
                    >
                        <Box width={'100%'} textAlign='center'>
                            <CheckCircleOutlineIcon fontSize='large' sx={{width: '40px', height: '40px'}}/>
                        </Box>
                        <Typography variant='h4' width={'100%'} textAlign='center'>Ya cargamos el dinero en tu cuenta</Typography>
                    </Box>
                }
                <DetailCard transaction={transaction} />
            </Stack>
            }
        </>
    )
}

(DetailPage as any).Layout = PageHomeLayout;

export const getServerSideProps: GetServerSideProps = async ({query}) => {
    const {id} = query;
    return {
        props: {
            id
        },
    }
};

export default DetailPage;
